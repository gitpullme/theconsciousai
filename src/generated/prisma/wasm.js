
/* !!! This is code generated by Prisma. Do not edit directly. !!!
/* eslint-disable */

Object.defineProperty(exports, "__esModule", { value: true });

const {
  PrismaClientKnownRequestError,
  PrismaClientUnknownRequestError,
  PrismaClientRustPanicError,
  PrismaClientInitializationError,
  PrismaClientValidationError,
  getPrismaClient,
  sqltag,
  empty,
  join,
  raw,
  skip,
  Decimal,
  Debug,
  objectEnumValues,
  makeStrictEnum,
  Extensions,
  warnOnce,
  defineDmmfProperty,
  Public,
  getRuntime,
  createParam,
} = require('./runtime/wasm.js')


const Prisma = {}

exports.Prisma = Prisma
exports.$Enums = {}

/**
 * Prisma Client JS version: 6.7.0
 * Query Engine version: 3cff47a7f5d65c3ea74883f1d736e41d68ce91ed
 */
Prisma.prismaVersion = {
  client: "6.7.0",
  engine: "3cff47a7f5d65c3ea74883f1d736e41d68ce91ed"
}

Prisma.PrismaClientKnownRequestError = PrismaClientKnownRequestError;
Prisma.PrismaClientUnknownRequestError = PrismaClientUnknownRequestError
Prisma.PrismaClientRustPanicError = PrismaClientRustPanicError
Prisma.PrismaClientInitializationError = PrismaClientInitializationError
Prisma.PrismaClientValidationError = PrismaClientValidationError
Prisma.Decimal = Decimal

/**
 * Re-export of sql-template-tag
 */
Prisma.sql = sqltag
Prisma.empty = empty
Prisma.join = join
Prisma.raw = raw
Prisma.validator = Public.validator

/**
* Extensions
*/
Prisma.getExtensionContext = Extensions.getExtensionContext
Prisma.defineExtension = Extensions.defineExtension

/**
 * Shorthand utilities for JSON filtering
 */
Prisma.DbNull = objectEnumValues.instances.DbNull
Prisma.JsonNull = objectEnumValues.instances.JsonNull
Prisma.AnyNull = objectEnumValues.instances.AnyNull

Prisma.NullTypes = {
  DbNull: objectEnumValues.classes.DbNull,
  JsonNull: objectEnumValues.classes.JsonNull,
  AnyNull: objectEnumValues.classes.AnyNull
}





/**
 * Enums
 */
exports.Prisma.TransactionIsolationLevel = makeStrictEnum({
  ReadUncommitted: 'ReadUncommitted',
  ReadCommitted: 'ReadCommitted',
  RepeatableRead: 'RepeatableRead',
  Serializable: 'Serializable'
});

exports.Prisma.AccountScalarFieldEnum = {
  id: 'id',
  userId: 'userId',
  type: 'type',
  provider: 'provider',
  providerAccountId: 'providerAccountId',
  refresh_token: 'refresh_token',
  access_token: 'access_token',
  expires_at: 'expires_at',
  token_type: 'token_type',
  scope: 'scope',
  id_token: 'id_token',
  session_state: 'session_state'
};

exports.Prisma.SessionScalarFieldEnum = {
  id: 'id',
  sessionToken: 'sessionToken',
  userId: 'userId',
  expires: 'expires'
};

exports.Prisma.UserScalarFieldEnum = {
  id: 'id',
  name: 'name',
  email: 'email',
  emailVerified: 'emailVerified',
  image: 'image',
  role: 'role',
  state: 'state',
  hospital: 'hospital',
  address: 'address',
  dateOfBirth: 'dateOfBirth',
  gender: 'gender',
  phone: 'phone',
  city: 'city',
  pincode: 'pincode'
};

exports.Prisma.VerificationTokenScalarFieldEnum = {
  identifier: 'identifier',
  token: 'token',
  expires: 'expires'
};

exports.Prisma.ReceiptScalarFieldEnum = {
  id: 'id',
  userId: 'userId',
  imageUrl: 'imageUrl',
  uploatedAt: 'uploatedAt',
  processedAt: 'processedAt',
  condition: 'condition',
  severity: 'severity',
  hospitalId: 'hospitalId',
  status: 'status',
  queuePosition: 'queuePosition',
  aiAnalysis: 'aiAnalysis',
  doctorId: 'doctorId'
};

exports.Prisma.HospitalScalarFieldEnum = {
  id: 'id',
  name: 'name',
  state: 'state',
  city: 'city',
  address: 'address'
};

exports.Prisma.StateScalarFieldEnum = {
  id: 'id',
  name: 'name'
};

exports.Prisma.DoctorScalarFieldEnum = {
  id: 'id',
  name: 'name',
  specialty: 'specialty',
  hospitalId: 'hospitalId',
  available: 'available'
};

exports.Prisma.AppointmentScalarFieldEnum = {
  id: 'id',
  userId: 'userId',
  hospitalId: 'hospitalId',
  doctorId: 'doctorId',
  symptoms: 'symptoms',
  aiAnalysis: 'aiAnalysis',
  severity: 'severity',
  status: 'status',
  preferredDate: 'preferredDate',
  scheduledDate: 'scheduledDate',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.EmergencyAlertScalarFieldEnum = {
  id: 'id',
  userId: 'userId',
  hospitalId: 'hospitalId',
  status: 'status',
  patientInfo: 'patientInfo',
  medicalHistory: 'medicalHistory',
  createdAt: 'createdAt',
  respondedAt: 'respondedAt',
  notes: 'notes'
};

exports.Prisma.MedicineReminderScalarFieldEnum = {
  id: 'id',
  userId: 'userId',
  name: 'name',
  dosage: 'dosage',
  frequency: 'frequency',
  time: 'time',
  notes: 'notes',
  createdAt: 'createdAt',
  isActive: 'isActive',
  aiGenerated: 'aiGenerated'
};

exports.Prisma.SortOrder = {
  asc: 'asc',
  desc: 'desc'
};

exports.Prisma.JsonNullValueInput = {
  JsonNull: Prisma.JsonNull
};

exports.Prisma.QueryMode = {
  default: 'default',
  insensitive: 'insensitive'
};

exports.Prisma.NullsOrder = {
  first: 'first',
  last: 'last'
};

exports.Prisma.JsonNullValueFilter = {
  DbNull: Prisma.DbNull,
  JsonNull: Prisma.JsonNull,
  AnyNull: Prisma.AnyNull
};
exports.AppointmentStatus = exports.$Enums.AppointmentStatus = {
  PENDING: 'PENDING',
  CONFIRMED: 'CONFIRMED',
  COMPLETED: 'COMPLETED',
  CANCELLED: 'CANCELLED'
};

exports.UserRole = exports.$Enums.UserRole = {
  USER: 'USER',
  ADMIN: 'ADMIN',
  HOSPITAL: 'HOSPITAL'
};

exports.ReceiptStatus = exports.$Enums.ReceiptStatus = {
  PENDING: 'PENDING',
  PROCESSED: 'PROCESSED',
  QUEUED: 'QUEUED',
  COMPLETED: 'COMPLETED'
};

exports.EmergencyAlertStatus = exports.$Enums.EmergencyAlertStatus = {
  PENDING: 'PENDING',
  ACKNOWLEDGED: 'ACKNOWLEDGED',
  RESPONDED: 'RESPONDED',
  CLOSED: 'CLOSED'
};

exports.Prisma.ModelName = {
  Account: 'Account',
  Session: 'Session',
  User: 'User',
  VerificationToken: 'VerificationToken',
  Receipt: 'Receipt',
  Hospital: 'Hospital',
  State: 'State',
  Doctor: 'Doctor',
  Appointment: 'Appointment',
  EmergencyAlert: 'EmergencyAlert',
  MedicineReminder: 'MedicineReminder'
};
/**
 * Create the Client
 */
const config = {
  "generator": {
    "name": "client",
    "provider": {
      "fromEnvVar": null,
      "value": "prisma-client-js"
    },
    "output": {
      "value": "C:\\notepad folder\\medical-queue-ai\\src\\generated\\prisma",
      "fromEnvVar": null
    },
    "config": {
      "engineType": "library"
    },
    "binaryTargets": [
      {
        "fromEnvVar": null,
        "value": "windows",
        "native": true
      }
    ],
    "previewFeatures": [
      "driverAdapters"
    ],
    "sourceFilePath": "C:\\notepad folder\\medical-queue-ai\\prisma\\schema.prisma",
    "isCustomOutput": true
  },
  "relativeEnvPaths": {
    "rootEnvPath": null,
    "schemaEnvPath": "../../../.env"
  },
  "relativePath": "../../../prisma",
  "clientVersion": "6.7.0",
  "engineVersion": "3cff47a7f5d65c3ea74883f1d736e41d68ce91ed",
  "datasourceNames": [
    "db"
  ],
  "activeProvider": "postgresql",
  "postinstall": false,
  "inlineDatasources": {
    "db": {
      "url": {
        "fromEnvVar": "DATABASE_URL",
        "value": null
      }
    }
  },
  "inlineSchema": "generator client {\n  provider        = \"prisma-client-js\"\n  output          = \"../src/generated/prisma\"\n  previewFeatures = [\"driverAdapters\"]\n}\n\ndatasource db {\n  provider  = \"postgresql\"\n  url       = env(\"DATABASE_URL\")\n  directUrl = env(\"DIRECT_URL\")\n}\n\nmodel Account {\n  id                String  @id @default(cuid())\n  userId            String\n  type              String\n  provider          String\n  providerAccountId String\n  refresh_token     String?\n  access_token      String?\n  expires_at        Int?\n  token_type        String?\n  scope             String?\n  id_token          String?\n  session_state     String?\n  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)\n\n  @@unique([provider, providerAccountId])\n  @@index([userId])\n  @@index([provider])\n}\n\nmodel Session {\n  id           String   @id @default(cuid())\n  sessionToken String   @unique\n  userId       String\n  expires      DateTime\n  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)\n\n  @@index([userId])\n  @@index([sessionToken])\n  @@index([expires])\n}\n\nmodel User {\n  id                String             @id @default(cuid())\n  name              String?\n  email             String?            @unique\n  emailVerified     DateTime?\n  image             String?\n  role              UserRole           @default(USER)\n  state             String?\n  hospital          String?\n  address           String?\n  dateOfBirth       DateTime?\n  gender            String?\n  phone             String?\n  city              String?\n  pincode           String?\n  accounts          Account[]\n  sessions          Session[]\n  appointments      Appointment[]\n  receipts          Receipt[]\n  emergencyAlerts   EmergencyAlert[]   @relation(\"PatientAlerts\")\n  medicineReminders MedicineReminder[]\n\n  @@index([role, hospital])\n  @@index([email])\n  @@index([state])\n  @@index([email, role])\n  @@index([hospital, role])\n}\n\nmodel VerificationToken {\n  identifier String\n  token      String   @unique\n  expires    DateTime\n\n  @@unique([identifier, token])\n}\n\nmodel Receipt {\n  id            String        @id @default(cuid())\n  userId        String\n  imageUrl      String\n  uploatedAt    DateTime      @default(now())\n  processedAt   DateTime?\n  condition     String?\n  severity      Int?          @default(0)\n  hospitalId    String?\n  status        ReceiptStatus @default(PENDING)\n  queuePosition Int?\n  aiAnalysis    String?\n  doctorId      String?\n  doctor        Doctor?       @relation(fields: [doctorId], references: [id])\n  hospital      Hospital?     @relation(fields: [hospitalId], references: [id])\n  user          User          @relation(fields: [userId], references: [id], onDelete: Cascade)\n\n  @@index([userId])\n  @@index([hospitalId])\n  @@index([doctorId])\n  @@index([status])\n}\n\nmodel Hospital {\n  id              String           @id @default(cuid())\n  name            String\n  state           String\n  city            String?\n  address         String?\n  doctors         Doctor[]\n  receipts        Receipt[]\n  appointments    Appointment[]\n  emergencyAlerts EmergencyAlert[] @relation(\"HospitalAlerts\")\n\n  @@index([state, city])\n  @@index([name])\n  @@index([state])\n}\n\nmodel State {\n  id   String @id @default(cuid())\n  name String @unique\n}\n\nmodel Doctor {\n  id           String        @id @default(cuid())\n  name         String\n  specialty    String\n  hospitalId   String\n  available    Boolean       @default(true)\n  hospital     Hospital      @relation(fields: [hospitalId], references: [id])\n  patients     Receipt[]\n  appointments Appointment[]\n\n  @@index([hospitalId])\n  @@index([specialty])\n  @@index([available])\n}\n\n// Appointment model for scheduling\nmodel Appointment {\n  id            String            @id @default(cuid())\n  userId        String\n  user          User              @relation(fields: [userId], references: [id], onDelete: Cascade)\n  hospitalId    String\n  hospital      Hospital          @relation(fields: [hospitalId], references: [id])\n  doctorId      String?\n  doctor        Doctor?           @relation(fields: [doctorId], references: [id])\n  symptoms      String            @db.Text\n  aiAnalysis    String?           @db.Text\n  severity      Int?              @default(0) // Higher number means more severe\n  status        AppointmentStatus @default(PENDING)\n  preferredDate DateTime\n  scheduledDate DateTime?\n  createdAt     DateTime          @default(now())\n  updatedAt     DateTime          @updatedAt\n\n  @@index([userId])\n  @@index([hospitalId])\n  @@index([doctorId])\n  @@index([status])\n  @@index([preferredDate])\n}\n\n// Emergency Alert model for urgent patient situations\nmodel EmergencyAlert {\n  id             String               @id @default(cuid())\n  userId         String\n  user           User                 @relation(\"PatientAlerts\", fields: [userId], references: [id])\n  hospitalId     String\n  hospital       Hospital             @relation(\"HospitalAlerts\", fields: [hospitalId], references: [id])\n  status         EmergencyAlertStatus @default(PENDING)\n  patientInfo    Json // Stores patient contact and location details\n  medicalHistory Json // Stores recent medical reports and conditions\n  createdAt      DateTime             @default(now())\n  respondedAt    DateTime?\n  notes          String?              @db.Text\n\n  @@index([userId])\n  @@index([hospitalId])\n  @@index([status])\n  @@index([createdAt])\n}\n\n// Medicine Reminder model for tracking medication schedules\nmodel MedicineReminder {\n  id          String   @id @default(cuid())\n  userId      String\n  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)\n  name        String\n  dosage      String\n  frequency   String\n  time        String\n  notes       String?  @db.Text\n  createdAt   DateTime @default(now())\n  isActive    Boolean  @default(true)\n  aiGenerated Boolean  @default(false)\n\n  @@index([userId])\n  @@index([isActive])\n}\n\nenum AppointmentStatus {\n  PENDING\n  CONFIRMED\n  COMPLETED\n  CANCELLED\n}\n\nenum UserRole {\n  USER\n  ADMIN\n  HOSPITAL\n}\n\nenum ReceiptStatus {\n  PENDING\n  PROCESSED\n  QUEUED\n  COMPLETED\n}\n\nenum EmergencyAlertStatus {\n  PENDING\n  ACKNOWLEDGED\n  RESPONDED\n  CLOSED\n}\n",
  "inlineSchemaHash": "047c0d654d1d8dbe0081b394b2f77a9f48fb70a670ef210436bb7f875fae67be",
  "copyEngine": true
}
config.dirname = '/'

config.runtimeDataModel = JSON.parse("{\"models\":{\"Account\":{\"fields\":[{\"name\":\"id\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"userId\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"type\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"provider\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"providerAccountId\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"refresh_token\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"access_token\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"expires_at\",\"kind\":\"scalar\",\"type\":\"Int\"},{\"name\":\"token_type\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"scope\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"id_token\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"session_state\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"user\",\"kind\":\"object\",\"type\":\"User\",\"relationName\":\"AccountToUser\"}],\"dbName\":null},\"Session\":{\"fields\":[{\"name\":\"id\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"sessionToken\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"userId\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"expires\",\"kind\":\"scalar\",\"type\":\"DateTime\"},{\"name\":\"user\",\"kind\":\"object\",\"type\":\"User\",\"relationName\":\"SessionToUser\"}],\"dbName\":null},\"User\":{\"fields\":[{\"name\":\"id\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"name\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"email\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"emailVerified\",\"kind\":\"scalar\",\"type\":\"DateTime\"},{\"name\":\"image\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"role\",\"kind\":\"enum\",\"type\":\"UserRole\"},{\"name\":\"state\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"hospital\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"address\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"dateOfBirth\",\"kind\":\"scalar\",\"type\":\"DateTime\"},{\"name\":\"gender\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"phone\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"city\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"pincode\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"accounts\",\"kind\":\"object\",\"type\":\"Account\",\"relationName\":\"AccountToUser\"},{\"name\":\"sessions\",\"kind\":\"object\",\"type\":\"Session\",\"relationName\":\"SessionToUser\"},{\"name\":\"appointments\",\"kind\":\"object\",\"type\":\"Appointment\",\"relationName\":\"AppointmentToUser\"},{\"name\":\"receipts\",\"kind\":\"object\",\"type\":\"Receipt\",\"relationName\":\"ReceiptToUser\"},{\"name\":\"emergencyAlerts\",\"kind\":\"object\",\"type\":\"EmergencyAlert\",\"relationName\":\"PatientAlerts\"},{\"name\":\"medicineReminders\",\"kind\":\"object\",\"type\":\"MedicineReminder\",\"relationName\":\"MedicineReminderToUser\"}],\"dbName\":null},\"VerificationToken\":{\"fields\":[{\"name\":\"identifier\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"token\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"expires\",\"kind\":\"scalar\",\"type\":\"DateTime\"}],\"dbName\":null},\"Receipt\":{\"fields\":[{\"name\":\"id\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"userId\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"imageUrl\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"uploatedAt\",\"kind\":\"scalar\",\"type\":\"DateTime\"},{\"name\":\"processedAt\",\"kind\":\"scalar\",\"type\":\"DateTime\"},{\"name\":\"condition\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"severity\",\"kind\":\"scalar\",\"type\":\"Int\"},{\"name\":\"hospitalId\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"status\",\"kind\":\"enum\",\"type\":\"ReceiptStatus\"},{\"name\":\"queuePosition\",\"kind\":\"scalar\",\"type\":\"Int\"},{\"name\":\"aiAnalysis\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"doctorId\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"doctor\",\"kind\":\"object\",\"type\":\"Doctor\",\"relationName\":\"DoctorToReceipt\"},{\"name\":\"hospital\",\"kind\":\"object\",\"type\":\"Hospital\",\"relationName\":\"HospitalToReceipt\"},{\"name\":\"user\",\"kind\":\"object\",\"type\":\"User\",\"relationName\":\"ReceiptToUser\"}],\"dbName\":null},\"Hospital\":{\"fields\":[{\"name\":\"id\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"name\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"state\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"city\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"address\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"doctors\",\"kind\":\"object\",\"type\":\"Doctor\",\"relationName\":\"DoctorToHospital\"},{\"name\":\"receipts\",\"kind\":\"object\",\"type\":\"Receipt\",\"relationName\":\"HospitalToReceipt\"},{\"name\":\"appointments\",\"kind\":\"object\",\"type\":\"Appointment\",\"relationName\":\"AppointmentToHospital\"},{\"name\":\"emergencyAlerts\",\"kind\":\"object\",\"type\":\"EmergencyAlert\",\"relationName\":\"HospitalAlerts\"}],\"dbName\":null},\"State\":{\"fields\":[{\"name\":\"id\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"name\",\"kind\":\"scalar\",\"type\":\"String\"}],\"dbName\":null},\"Doctor\":{\"fields\":[{\"name\":\"id\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"name\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"specialty\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"hospitalId\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"available\",\"kind\":\"scalar\",\"type\":\"Boolean\"},{\"name\":\"hospital\",\"kind\":\"object\",\"type\":\"Hospital\",\"relationName\":\"DoctorToHospital\"},{\"name\":\"patients\",\"kind\":\"object\",\"type\":\"Receipt\",\"relationName\":\"DoctorToReceipt\"},{\"name\":\"appointments\",\"kind\":\"object\",\"type\":\"Appointment\",\"relationName\":\"AppointmentToDoctor\"}],\"dbName\":null},\"Appointment\":{\"fields\":[{\"name\":\"id\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"userId\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"user\",\"kind\":\"object\",\"type\":\"User\",\"relationName\":\"AppointmentToUser\"},{\"name\":\"hospitalId\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"hospital\",\"kind\":\"object\",\"type\":\"Hospital\",\"relationName\":\"AppointmentToHospital\"},{\"name\":\"doctorId\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"doctor\",\"kind\":\"object\",\"type\":\"Doctor\",\"relationName\":\"AppointmentToDoctor\"},{\"name\":\"symptoms\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"aiAnalysis\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"severity\",\"kind\":\"scalar\",\"type\":\"Int\"},{\"name\":\"status\",\"kind\":\"enum\",\"type\":\"AppointmentStatus\"},{\"name\":\"preferredDate\",\"kind\":\"scalar\",\"type\":\"DateTime\"},{\"name\":\"scheduledDate\",\"kind\":\"scalar\",\"type\":\"DateTime\"},{\"name\":\"createdAt\",\"kind\":\"scalar\",\"type\":\"DateTime\"},{\"name\":\"updatedAt\",\"kind\":\"scalar\",\"type\":\"DateTime\"}],\"dbName\":null},\"EmergencyAlert\":{\"fields\":[{\"name\":\"id\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"userId\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"user\",\"kind\":\"object\",\"type\":\"User\",\"relationName\":\"PatientAlerts\"},{\"name\":\"hospitalId\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"hospital\",\"kind\":\"object\",\"type\":\"Hospital\",\"relationName\":\"HospitalAlerts\"},{\"name\":\"status\",\"kind\":\"enum\",\"type\":\"EmergencyAlertStatus\"},{\"name\":\"patientInfo\",\"kind\":\"scalar\",\"type\":\"Json\"},{\"name\":\"medicalHistory\",\"kind\":\"scalar\",\"type\":\"Json\"},{\"name\":\"createdAt\",\"kind\":\"scalar\",\"type\":\"DateTime\"},{\"name\":\"respondedAt\",\"kind\":\"scalar\",\"type\":\"DateTime\"},{\"name\":\"notes\",\"kind\":\"scalar\",\"type\":\"String\"}],\"dbName\":null},\"MedicineReminder\":{\"fields\":[{\"name\":\"id\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"userId\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"user\",\"kind\":\"object\",\"type\":\"User\",\"relationName\":\"MedicineReminderToUser\"},{\"name\":\"name\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"dosage\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"frequency\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"time\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"notes\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"createdAt\",\"kind\":\"scalar\",\"type\":\"DateTime\"},{\"name\":\"isActive\",\"kind\":\"scalar\",\"type\":\"Boolean\"},{\"name\":\"aiGenerated\",\"kind\":\"scalar\",\"type\":\"Boolean\"}],\"dbName\":null}},\"enums\":{},\"types\":{}}")
defineDmmfProperty(exports.Prisma, config.runtimeDataModel)
config.engineWasm = {
  getRuntime: async () => require('./query_engine_bg.js'),
  getQueryEngineWasmModule: async () => {
    const loader = (await import('#wasm-engine-loader')).default
    const engine = (await loader).default
    return engine
  }
}
config.compilerWasm = undefined

config.injectableEdgeEnv = () => ({
  parsed: {
    DATABASE_URL: typeof globalThis !== 'undefined' && globalThis['DATABASE_URL'] || typeof process !== 'undefined' && process.env && process.env.DATABASE_URL || undefined
  }
})

if (typeof globalThis !== 'undefined' && globalThis['DEBUG'] || typeof process !== 'undefined' && process.env && process.env.DEBUG || undefined) {
  Debug.enable(typeof globalThis !== 'undefined' && globalThis['DEBUG'] || typeof process !== 'undefined' && process.env && process.env.DEBUG || undefined)
}

const PrismaClient = getPrismaClient(config)
exports.PrismaClient = PrismaClient
Object.assign(exports, Prisma)


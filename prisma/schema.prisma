generator client {
  provider        = "prisma-client-js"
  output          = "../src/generated/prisma"
  previewFeatures = ["driverAdapters"]
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@index([userId])
  @@index([provider])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
  @@index([sessionToken])
  @@index([expires])
}

model User {
  id             String           @id @default(cuid())
  name           String?
  email          String?          @unique
  emailVerified  DateTime?
  image          String?
  role           UserRole         @default(USER)
  state          String?
  hospital       String?
  address        String?
  dateOfBirth    DateTime?
  gender         String?
  phone          String?
  city           String?
  pincode        String?
  accounts       Account[]
  sessions       Session[]
  appointments   Appointment[]
  receipts       Receipt[]
  emergencyAlerts EmergencyAlert[] @relation("PatientAlerts")
  medicineReminders MedicineReminder[]

  @@index([role, hospital])
  @@index([email])
  @@index([state])
  @@index([email, role])
  @@index([hospital, role])
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Receipt {
  id            String        @id @default(cuid())
  userId        String
  imageUrl      String
  uploatedAt    DateTime      @default(now())
  processedAt   DateTime?
  condition     String?
  severity      Int?          @default(0)
  hospitalId    String?
  status        ReceiptStatus @default(PENDING)
  queuePosition Int?
  aiAnalysis    String?
  doctorId      String?
  updatedAt     DateTime      @updatedAt
  doctor        Doctor?       @relation(fields: [doctorId], references: [id])
  hospital      Hospital?     @relation(fields: [hospitalId], references: [id])
  user          User          @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
  @@index([hospitalId])
  @@index([doctorId])
  @@index([status])
}

model Hospital {
  id             String           @id @default(cuid())
  name           String
  state          String
  city           String?
  address        String?
  doctors        Doctor[]
  receipts       Receipt[]
  appointments   Appointment[]
  emergencyAlerts EmergencyAlert[] @relation("HospitalAlerts")

  @@index([state, city])
  @@index([name])
  @@index([state])
}

model State {
  id   String @id @default(cuid())
  name String @unique
}

model Doctor {
  id           String        @id @default(cuid())
  name         String
  specialty    String
  hospitalId   String
  available    Boolean       @default(true)
  hospital     Hospital      @relation(fields: [hospitalId], references: [id])
  patients     Receipt[]
  appointments Appointment[]

  @@index([hospitalId])
  @@index([specialty])
  @@index([available])
}

// Appointment model for scheduling
model Appointment {
  id              String            @id @default(cuid())
  userId          String
  user            User              @relation(fields: [userId], references: [id], onDelete: Cascade)
  hospitalId      String
  hospital        Hospital          @relation(fields: [hospitalId], references: [id])
  doctorId        String?
  doctor          Doctor?           @relation(fields: [doctorId], references: [id])
  symptoms        String            @db.Text
  aiAnalysis      String?           @db.Text
  severity        Int?              @default(0) // Higher number means more severe
  status          AppointmentStatus @default(PENDING)
  preferredDate   DateTime
  scheduledDate   DateTime?
  createdAt       DateTime          @default(now())
  updatedAt       DateTime          @updatedAt

  @@index([userId])
  @@index([hospitalId])
  @@index([doctorId])
  @@index([status])
  @@index([preferredDate])
}

// Emergency Alert model for urgent patient situations
model EmergencyAlert {
  id             String               @id @default(cuid())
  userId         String
  user           User                 @relation("PatientAlerts", fields: [userId], references: [id])
  hospitalId     String
  hospital       Hospital             @relation("HospitalAlerts", fields: [hospitalId], references: [id])
  status         EmergencyAlertStatus @default(PENDING)
  patientInfo    Json                 // Stores patient contact and location details
  medicalHistory Json                 // Stores recent medical reports and conditions
  createdAt      DateTime             @default(now())
  respondedAt    DateTime?
  notes          String?              @db.Text

  @@index([userId])
  @@index([hospitalId])
  @@index([status])
  @@index([createdAt])
}

// Medicine Reminder model for tracking medication schedules
model MedicineReminder {
  id          String   @id @default(cuid())
  userId      String
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  name        String
  dosage      String
  frequency   String
  time        String
  notes       String?  @db.Text
  createdAt   DateTime @default(now())
  isActive    Boolean  @default(true)
  aiGenerated Boolean  @default(false)

  @@index([userId])
  @@index([isActive])
}

enum AppointmentStatus {
  PENDING
  CONFIRMED
  COMPLETED
  CANCELLED
}

enum UserRole {
  USER
  ADMIN
  HOSPITAL
}

enum ReceiptStatus {
  PENDING
  PROCESSED
  QUEUED
  COMPLETED
}

enum EmergencyAlertStatus {
  PENDING
  ACKNOWLEDGED
  RESPONDED
  CLOSED
}

// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  output   = "../src/generated/prisma"
  previewFeatures = ["driverAdapters"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

// Auth models
model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id             String    @id @default(cuid())
  name           String?
  email          String?   @unique
  emailVerified  DateTime?
  image          String?
  role           UserRole  @default(USER)
  accounts       Account[]
  sessions       Session[]
  receipts       Receipt[]
  state          String?
  hospital       String?
}

enum UserRole {
  USER
  ADMIN
  HOSPITAL
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

// Medical receipt and queue models
model Receipt {
  id          String   @id @default(cuid())
  userId      String
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  imageUrl    String
  uploatedAt  DateTime @default(now())
  processedAt DateTime?
  condition   String?
  severity    Int?     @default(0) // Higher number means more severe
  hospitalId  String?
  hospital    Hospital? @relation(fields: [hospitalId], references: [id])
  status      ReceiptStatus @default(PENDING)
  queuePosition Int?
  aiAnalysis  String?  @db.Text
}

enum ReceiptStatus {
  PENDING
  PROCESSED
  QUEUED
  COMPLETED
}

model Hospital {
  id          String   @id @default(cuid())
  name        String
  state       String
  city        String?
  address     String?
  receipts    Receipt[]
}

model State {
  id          String   @id @default(cuid())
  name        String   @unique
}
